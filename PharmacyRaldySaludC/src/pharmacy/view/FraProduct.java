/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pharmacy.view;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import pharmacy.logic.Employee;
import pharmacy.logic.Product;
import pharmacy.persistence.DB;

/**
 *
 * @author User
 */
public class FraProduct extends javax.swing.JFrame {
    private DB dataFile;
    private ImageIcon iconNoPhoto;
    
    /**
     * Creates new form FraProduct
     */
    public FraProduct() {
        initComponents();
    }
    
    public FraProduct(DB dataFile) {
        initComponents();
        labPhotoFilename.setVisible(false);
        this.iconNoPhoto = (ImageIcon)labPhoto.getIcon();
        this.setLocationRelativeTo(null);

        this.dataFile = dataFile;
        this.selectProduct();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panPersonalData = new javax.swing.JPanel();
        lbaName = new javax.swing.JLabel();
        labType = new javax.swing.JLabel();
        labDescription = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtConstain = new javax.swing.JTextField();
        labPhoto = new javax.swing.JLabel();
        labId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        labPhotoFilename = new javax.swing.JLabel();
        butPhoto = new javax.swing.JButton();
        labConstain = new javax.swing.JLabel();
        jType = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        panButtons = new javax.swing.JPanel();
        butNew = new javax.swing.JButton();
        butFirst = new javax.swing.JButton();
        butPrevious = new javax.swing.JButton();
        butNext = new javax.swing.JButton();
        butLast = new javax.swing.JButton();
        butSearch = new javax.swing.JButton();
        butUpdate = new javax.swing.JButton();
        butDelete = new javax.swing.JButton();
        butReport = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setTitle("PharmacyRS Product System");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panPersonalData.setBorder(javax.swing.BorderFactory.createTitledBorder("Product Data"));
        panPersonalData.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbaName.setText("Name");
        panPersonalData.add(lbaName, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        labType.setText("Type");
        panPersonalData.add(labType, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        labDescription.setText("Description");
        panPersonalData.add(labDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, 28));
        panPersonalData.add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 240, -1));
        panPersonalData.add(txtConstain, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 140, 240, -1));

        labPhoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pharmacy/view/noImage.jpg"))); // NOI18N
        panPersonalData.add(labPhoto, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 166, 149));

        labId.setText("id");
        panPersonalData.add(labId, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 63, -1));
        panPersonalData.add(txtId, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 240, -1));
        panPersonalData.add(labPhotoFilename, new org.netbeans.lib.awtextra.AbsoluteConstraints(525, 16, 30, 24));

        butPhoto.setText("Load photo");
        butPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPhotoActionPerformed(evt);
            }
        });
        panPersonalData.add(butPhoto, new org.netbeans.lib.awtextra.AbsoluteConstraints(428, 219, -1, -1));

        labConstain.setText("Constain");
        panPersonalData.add(labConstain, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        jType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select...", "Medications", "Orthopedic", "Over the counter", "Skin Care", "Minimarket" }));
        panPersonalData.add(jType, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 240, -1));

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        jScrollPane1.setViewportView(txtDescription);

        panPersonalData.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 240, 100));

        getContentPane().add(panPersonalData, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 588, 300));

        panButtons.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        butNew.setText("New");
        butNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNewActionPerformed(evt);
            }
        });

        butFirst.setText("|<");
        butFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFirstActionPerformed(evt);
            }
        });

        butPrevious.setText("<");
        butPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPreviousActionPerformed(evt);
            }
        });

        butNext.setText(">");
        butNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNextActionPerformed(evt);
            }
        });

        butLast.setText(">|");
        butLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLastActionPerformed(evt);
            }
        });

        butSearch.setText("Search...");
        butSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSearchActionPerformed(evt);
            }
        });

        butUpdate.setText("Update");
        butUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUpdateActionPerformed(evt);
            }
        });

        butDelete.setText("Delete");
        butDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDeleteActionPerformed(evt);
            }
        });

        butReport.setText("Report");
        butReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panButtonsLayout = new javax.swing.GroupLayout(panButtons);
        panButtons.setLayout(panButtonsLayout);
        panButtonsLayout.setHorizontalGroup(
            panButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(butFirst)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butPrevious)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butNext)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butLast)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butReport, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(butUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butDelete)
                .addContainerGap())
        );
        panButtonsLayout.setVerticalGroup(
            panButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panButtonsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butNew)
                    .addComponent(butFirst)
                    .addComponent(butPrevious)
                    .addComponent(butNext)
                    .addComponent(butLast)
                    .addComponent(butSearch)
                    .addComponent(butUpdate)
                    .addComponent(butDelete)
                    .addComponent(butReport))
                .addContainerGap())
        );

        getContentPane().add(panButtons, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 322, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pharmacy/view/fondo-de-pantalla-blanco-2 (1).jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 380));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPhotoActionPerformed
        JFileChooser fc = new JFileChooser();
        int select = fc.showOpenDialog(this);
        if (select == JFileChooser.APPROVE_OPTION) {
            try {
                File photoFile = fc.getSelectedFile();
                labPhotoFilename.setText(photoFile.getCanonicalPath());
                ImageIcon iconPhoto = new ImageIcon(labPhotoFilename.getText());
                labPhoto.setIcon(iconPhoto);
            } catch (IOException ex) {
                Logger.getLogger(FraProduct.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_butPhotoActionPerformed

    private void butNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNewActionPerformed
        if (butNew.getText().equals("New")) {
            this.newView();
        }
        else {
            if (butNew.getText().equals("Save")) {
                if (this.validateView()) {
                    this.insertProduct();

                    butNew.setText("New");
                    butFirst.setEnabled(true);
                    butPrevious.setEnabled(true);
                    butNext.setEnabled(true);
                    butLast.setEnabled(true);
                    butSearch.setEnabled(true);
                    butUpdate.setEnabled(true);
                    butDelete.setEnabled(true);
                }
                else {
                    JOptionPane.showMessageDialog(this, "Please, fill the requeried fields",
                        "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_butNewActionPerformed

    private void butFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFirstActionPerformed
        try {
            this.getDataFile().getResultSet().first();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(FraProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butFirstActionPerformed

    private void butPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPreviousActionPerformed
        try {
            if (!this.getDataFile().getResultSet().isFirst()) {
                this.getDataFile().getResultSet().previous();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(FraProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butPreviousActionPerformed

    private void butNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNextActionPerformed
        try {
            if (!this.getDataFile().getResultSet().isLast()) {
                this.getDataFile().getResultSet().next();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(FraProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butNextActionPerformed

    private void butLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLastActionPerformed
        try {
            this.getDataFile().getResultSet().last();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(FraProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butLastActionPerformed

    private void butSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSearchActionPerformed
        long id = Long.parseLong(JOptionPane.showInputDialog(
            "Please, write the Product id", "Product id"));
    if (id > 0) {
        this.searchProduct(id);
        }
    }//GEN-LAST:event_butSearchActionPerformed

    private void butUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUpdateActionPerformed
        this.updateProduct();
        JOptionPane.showMessageDialog(this, "Updated record!", "Update record",
            JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_butUpdateActionPerformed

    private void butDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this,
            "Are you sure to delete this record?", "Delete record",
            JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

        this.deleteProduct();
        JOptionPane.showMessageDialog(this, "Deleted record!", "Delete record",
            JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_butDeleteActionPerformed

    private void butReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butReportActionPerformed
        String[] fields = {"Product Id", "Product name", "Type", "Constain", "Description"};
        String[] dbFields = {"idProduct", "productName", "type", "constain", "description"};

        PDFReport report = new PDFReport(
            "productReport.pdf",
            "CR",
            "PharmacyRSApp",
            "Products Report",
            "Pharmacy Raldy Salud",
            fields,
            dbFields,
            this.getDataFile().getResultSet());
        report.generatePDF();

        try {
            File path = new File("productReport.pdf");
            Desktop.getDesktop().open(path);
        } catch (IOException ex) {
            Logger.getLogger(FraUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butReportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FraProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FraProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FraProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FraProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FraProduct().setVisible(true);
            }
        });
    }
    /**
     * Get data file
     * @return data file
     */
    public DB getDataFile() {
        return this.dataFile;
    }

    /**
     * Set data file
     * @param dataFile data file
     */
    public void setDataFile(DB dataFile) {
        this.dataFile = dataFile;
    }

    /**
     * Get Image Icon
     * @return Image Icon
     */
    public ImageIcon getIconNoPhoto() {
        return this.iconNoPhoto;
    }

    /**
     * Set Image Icon
     * @param iconNoPhoto Image Icon
     */
    public void setIconNoPhoto(ImageIcon iconNoPhoto) {
        this.iconNoPhoto = iconNoPhoto;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butDelete;
    private javax.swing.JButton butFirst;
    private javax.swing.JButton butLast;
    private javax.swing.JButton butNew;
    private javax.swing.JButton butNext;
    private javax.swing.JButton butPhoto;
    private javax.swing.JButton butPrevious;
    private javax.swing.JButton butReport;
    private javax.swing.JButton butSearch;
    private javax.swing.JButton butUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jType;
    private javax.swing.JLabel labConstain;
    private javax.swing.JLabel labDescription;
    private javax.swing.JLabel labId;
    private javax.swing.JLabel labPhoto;
    private javax.swing.JLabel labPhotoFilename;
    private javax.swing.JLabel labType;
    private javax.swing.JLabel lbaName;
    private javax.swing.JPanel panButtons;
    private javax.swing.JPanel panPersonalData;
    private javax.swing.JTextField txtConstain;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
    /**
     * Validate the view for save
     * @return True is ok
     */
    private boolean validateView() {
        boolean validate = !(txtId.getText().equals("")
                || txtName.getText().equals("") 
                || txtConstain.getText().equals("")
                || (jType.getSelectedItem().equals("Select..."))
                || txtDescription.getText().equals(""));
        return validate;
    }

    /**
     * Obtain the view data and tranfer it to the object
     */
    private Product view2Object() {
        Product product = new Product();

        product.setIdProduct(Long.parseLong(txtId.getText()));
        product.setNameProduct(txtName.getText());
        product.setTypeProduct(jType.getSelectedItem().toString());
        product.setPhoto(labPhotoFilename.getText());
        product.setConstainProduct(txtConstain.getText());
        product.setDescriptionProduct(txtDescription.getText());
        return product;
    }

    /**
     * You obtain data from an object and pass it to the view
     */
    private void updateView() {
        if (this.getDataFile().getResultSet() == null) {
            this.newView();
        }
        else {
            this.object2View();
        }
    }

    /**
     * You prepare the view to enter a new employee data
     */
    private void newView() {
        txtId.setText("");
        txtName.setText("");
        txtConstain.setText("");
        jType.setSelectedItem("Select...");
        labPhotoFilename.setText("");
        labPhoto.setIcon(this.getIconNoPhoto());
        txtDescription.setText("");
        
        
        butNew.setText("Save");
        butFirst.setEnabled(false);
        butPrevious.setEnabled(false);
        butNext.setEnabled(false);
        butLast.setEnabled(false);
        butSearch.setEnabled(false);
        butUpdate.setEnabled(false);
        butDelete.setEnabled(false);
    }

    /**
     * Result set -> object
     */
    private void object2View() {
        Product product = new Product();
        try {
            product.setIdProduct(this.getDataFile().getResultSet().getLong("idProduct"));
            product.setNameProduct(this.getDataFile().getResultSet().getString("productName"));
            product.setTypeProduct(this.getDataFile().getResultSet().getString("type"));
            product.setPhoto(
                    (this.getDataFile().getResultSet().getString("photo") == null) 
                            ? "" : this.getDataFile().getResultSet().getString("photo"));
            product.setConstainProduct(this.getDataFile().getResultSet().getString("constain"));
            product.setDescriptionProduct(this.getDataFile().getResultSet().getString("description"));

            this.object2View(product);
        } catch (SQLException ex) {
            Logger.getLogger(FraProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Show the object data into view
     * @param product Employee to show
     */
    private void object2View(Product product) {
        txtId.setText("" + product.getIdProduct());
        txtName.setText(product.getNameProduct());
        jType.setSelectedItem(product.getTypeProduct());
        txtConstain.setText(product.getConstainProduct());

        if (product.getPhoto().equals("")) {
            labPhotoFilename.setText("");
            labPhoto.setIcon(this.getIconNoPhoto());
        }
        else {
            labPhotoFilename.setText(product.getPhoto());
            ImageIcon iconPhoto = new ImageIcon(labPhotoFilename.getText());
            labPhoto.setIcon(iconPhoto);
        }    
        txtDescription.setText(product.getDescriptionProduct());
    }

    /**
     * Select employees from DB
     */
    private void selectProduct() {
        String query = "SELECT * FROM Product";
        if (this.getDataFile().execute(query)) {
            try {
                this.getDataFile().getResultSet().next();
                this.updateView();
            } catch (SQLException ex) {
                Logger.getLogger(FraProduct.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * Update Product
     */
    private void updateProduct() {
        Product product = this.view2Object();

        String query = "UPDATE Product SET "
                + "productName = '" + product.getNameProduct()+ "', "
                + "type = '" + product.getTypeProduct()+ "', "
                + "photo = '" + product.getPhoto() + "', "
                + "constain = " + product.getConstainProduct()+ ", "
                + "description = " + product.getDescriptionProduct()+ " "
                + "WHERE idProduct = " + product.getIdProduct();
        if (this.getDataFile().execute(query)) {
            this.selectProduct();
            this.searchProduct(product.getIdProduct());
        }
    }

    /**
     * Delete Product
     */
    private void deleteProduct() {
        Product product = this.view2Object();
        String query = "DELETE * FROM Product WHERE idProduct = " + product.getIdProduct();
        if (this.getDataFile().execute(query)) {
            this.selectProduct();
        }        
    }

    /**
     * Search Product by id
     * @param id Product id
     */
    private void searchProduct(long id) {
        boolean find = false;
        try {
            if (this.getDataFile().getResultSet() != null) {
                Long lastId = this.getDataFile().getResultSet().getLong("idProduct");
                this.getDataFile().getResultSet().beforeFirst();
                while (this.getDataFile().getResultSet().next()) {
                    if (this.getDataFile().getResultSet().getLong("idProduct") == id) {
                        find = true;
                        break;
                    }
                }
                if (find) {
                    this.updateView();
                }
                else {
                    this.getDataFile().getResultSet().first();
                    this.searchProduct(lastId);
                    JOptionPane.showMessageDialog(this, "Product " + id + " was not found!");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(FraProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Insert new Product
     */
    private void insertProduct() {
        Product product = this.view2Object();

        String query = "INSERT INTO Product "
                + "(idProduct, productName, type, photo, constain, description) "
                + "VALUES ("
                + product.getIdProduct()+ ", '"
                + product.getNameProduct() + "', '"
                + product.getTypeProduct() + "', '"
                + product.getPhoto() + "', '"
                + product.getConstainProduct() + "', '"
                + product.getDescriptionProduct()+ "')";
        if (this.getDataFile().execute(query)) {
            this.selectProduct();
            this.searchProduct(product.getIdProduct());
        }
    }
}
