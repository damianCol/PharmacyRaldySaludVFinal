/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pharmacy.view;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import pharmacy.logic.Employee;
import pharmacy.logic.Product;
import pharmacy.logic.Sale;
import pharmacy.persistence.DB;

/**
 *
 * @author User
 */
public class FraSell extends javax.swing.JFrame {

    private DB dataFile;
    private String lastPassword;
    private long[] employeeIndexes;
    private long[] productIndexes;

    /**
     * Creates new form FraSell
     */
    public FraSell() {
        initComponents();
    }

    public FraSell(DB dataFile) {
        initComponents();

        this.setLocationRelativeTo(null);

        this.dataFile = dataFile;
        this.loadProductCombo();
        this.loadEmployeeCombo();
        
        this.selectSale();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox4 = new javax.swing.JComboBox<>();
        panPersonalData = new javax.swing.JPanel();
        lbaNameProduct = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        labId = new javax.swing.JLabel();
        labDateSale = new javax.swing.JLabel();
        labIdEmployee = new javax.swing.JLabel();
        lbaNameEmployee = new javax.swing.JLabel();
        txtNameProduct = new javax.swing.JTextField();
        lbaNameProduct1 = new javax.swing.JLabel();
        txtidSale = new javax.swing.JTextField();
        butGenerate = new javax.swing.JButton();
        labQuantity = new javax.swing.JLabel();
        dateSale = new com.toedter.calendar.JDateChooser();
        lbaLastNameEmployee = new javax.swing.JLabel();
        txtLastNameEmployee = new javax.swing.JTextField();
        txtNameEmployee = new javax.swing.JTextField();
        comProduct = new javax.swing.JComboBox<>();
        comEmployee = new javax.swing.JComboBox<>();
        panButtons = new javax.swing.JPanel();
        butNew = new javax.swing.JButton();
        butFirst = new javax.swing.JButton();
        butPrevious = new javax.swing.JButton();
        butNext = new javax.swing.JButton();
        butLast = new javax.swing.JButton();
        butSearch = new javax.swing.JButton();
        butUpdate = new javax.swing.JButton();
        butDelete = new javax.swing.JButton();
        butReport = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setTitle("PharmacyRS Sales System");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panPersonalData.setBorder(javax.swing.BorderFactory.createTitledBorder("Sale Data"));
        panPersonalData.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbaNameProduct.setText("NameProduct");
        panPersonalData.add(lbaNameProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 80, 30));
        panPersonalData.add(txtQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 300, 40, 30));

        labId.setText("idProduct");
        panPersonalData.add(labId, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 70, 20));

        labDateSale.setText("dateSale");
        panPersonalData.add(labDateSale, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 60, 30));

        labIdEmployee.setText("idEmployee");
        panPersonalData.add(labIdEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 70, 20));

        lbaNameEmployee.setText("firstNameEmployee");
        panPersonalData.add(lbaNameEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 100, 20));
        panPersonalData.add(txtNameProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, 210, 30));

        lbaNameProduct1.setText("idSale");
        panPersonalData.add(lbaNameProduct1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 40, 30));
        panPersonalData.add(txtidSale, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 130, 30));

        butGenerate.setText("Generate");
        butGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGenerateActionPerformed(evt);
            }
        });
        panPersonalData.add(butGenerate, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, -1, -1));

        labQuantity.setText("Quantity");
        panPersonalData.add(labQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 60, 20));
        panPersonalData.add(dateSale, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 260, 210, 30));

        lbaLastNameEmployee.setText("lastNameEmployee");
        panPersonalData.add(lbaLastNameEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 100, 20));
        panPersonalData.add(txtLastNameEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, 210, 30));
        panPersonalData.add(txtNameEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 210, 30));

        comProduct.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        panPersonalData.add(comProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 180, 210, -1));

        comEmployee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        panPersonalData.add(comEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 210, -1));

        getContentPane().add(panPersonalData, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 371, 338));

        panButtons.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        butNew.setText("New");
        butNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNewActionPerformed(evt);
            }
        });

        butFirst.setText("|<");
        butFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFirstActionPerformed(evt);
            }
        });

        butPrevious.setText("<");
        butPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPreviousActionPerformed(evt);
            }
        });

        butNext.setText(">");
        butNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNextActionPerformed(evt);
            }
        });

        butLast.setText(">|");
        butLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLastActionPerformed(evt);
            }
        });

        butSearch.setText("Search...");
        butSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSearchActionPerformed(evt);
            }
        });

        butUpdate.setText("Update");
        butUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUpdateActionPerformed(evt);
            }
        });

        butDelete.setText("Delete");
        butDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDeleteActionPerformed(evt);
            }
        });

        butReport.setText("Report");
        butReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panButtonsLayout = new javax.swing.GroupLayout(panButtons);
        panButtons.setLayout(panButtonsLayout);
        panButtonsLayout.setHorizontalGroup(
            panButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panButtonsLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(panButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panButtonsLayout.createSequentialGroup()
                        .addComponent(butFirst)
                        .addGap(18, 18, 18)
                        .addComponent(butPrevious)
                        .addGap(18, 18, 18)
                        .addComponent(butNext)
                        .addGap(18, 18, 18)
                        .addComponent(butLast))
                    .addGroup(panButtonsLayout.createSequentialGroup()
                        .addComponent(butReport)
                        .addGap(18, 18, 18)
                        .addComponent(butNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(butUpdate)))
                .addGap(18, 18, 18)
                .addGroup(panButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(butSearch)
                    .addComponent(butDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panButtonsLayout.setVerticalGroup(
            panButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panButtonsLayout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(panButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butDelete)
                    .addComponent(butUpdate)
                    .addComponent(butNew)
                    .addComponent(butReport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butFirst)
                    .addComponent(butPrevious)
                    .addComponent(butNext)
                    .addComponent(butLast)
                    .addComponent(butSearch))
                .addContainerGap())
        );

        getContentPane().add(panButtons, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 355, 370, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pharmacy/view/fondo-de-pantalla-blanco-2 (1).jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 390, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNewActionPerformed
        if (butNew.getText().equals("New")) {
            this.newView();
        } else if (butNew.getText().equals("Save")) {
            if (this.validateView()) {
                this.insertSale();

                butNew.setText("New");
                butFirst.setEnabled(true);
                butPrevious.setEnabled(true);
                butNext.setEnabled(true);
                butLast.setEnabled(true);
                butSearch.setEnabled(true);
                butUpdate.setEnabled(true);
                butDelete.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(this, "Please, fill the requeried fields",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_butNewActionPerformed

    private void butFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFirstActionPerformed
        try {
            this.getDataFile().getResultSet().first();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(FraProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butFirstActionPerformed

    private void butPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPreviousActionPerformed
        try {
            if (!this.getDataFile().getResultSet().isFirst()) {
                this.getDataFile().getResultSet().previous();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(FraProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butPreviousActionPerformed

    private void butNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNextActionPerformed
        try {
            if (!this.getDataFile().getResultSet().isLast()) {
                this.getDataFile().getResultSet().next();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(FraProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butNextActionPerformed

    private void butLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLastActionPerformed
        try {
            this.getDataFile().getResultSet().last();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(FraProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butLastActionPerformed

    private void butSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSearchActionPerformed
        long id = Long.parseLong(JOptionPane.showInputDialog(
                "Please, write the Product id", "Product id"));
        if (id > 0) {
            this.searchSale(id);
        }
    }//GEN-LAST:event_butSearchActionPerformed

    private void butUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUpdateActionPerformed
        this.updateSale();
        JOptionPane.showMessageDialog(this, "Updated record!", "Update record",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_butUpdateActionPerformed

    private void butDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this,
                "Are you sure to delete this record?", "Delete record",
                JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

            this.deleteSale();
            JOptionPane.showMessageDialog(this, "Deleted record!", "Delete record",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_butDeleteActionPerformed

    private void butReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butReportActionPerformed
        String[] fields = {"Product Id", "Product name", "Type", "Constain", "Description"};
        String[] dbFields = {"idProduct", "productName", "type", "constain", "description"};

        PDFReport report = new PDFReport(
                "SaleReport.pdf",
                "CR",
                "PharmacyRSApp",
                "Sales Report",
                "Pharmacy Raldy Salud",
                fields,
                dbFields,
                this.getDataFile().getResultSet());
        report.generatePDF();

        try {
            File path = new File("productReport.pdf");
            Desktop.getDesktop().open(path);
        } catch (IOException ex) {
            Logger.getLogger(FraUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butReportActionPerformed

    private void butGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGenerateActionPerformed
        Random code = new Random();
        Long codeSale = 100000 + code.nextLong()%1000000;
        txtidSale.setText(codeSale.toString());
    }//GEN-LAST:event_butGenerateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FraSell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FraSell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FraSell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FraSell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FraSell().setVisible(true);
            }
        });
    }

    /**
     * Get data file
     *
     * @return data file
     */
    public DB getDataFile() {
        return this.dataFile;
    }

    /**
     * Set data file
     *
     * @param dataFile data file
     */
    public void setDataFile(DB dataFile) {
        this.dataFile = dataFile;
    }

    /**
     * Get Employee indexes
     * @return Employee indexes
     */
    public long[] getEmployeeIndexes() {
        return this.employeeIndexes;
    }

    /**
     * Get Employee indexes
     * @param index Array index
     * @return Employee identification
     */
    public long getEmployeeIndexes(int index) {
        return this.employeeIndexes[index];
    }

    /**
     * Set Employee indexes
     * @param employeeIndexes Employee indexes
     */
    public void setEmployeeIndexes(long[] employeeIndexes) {
        this.employeeIndexes = employeeIndexes;
    }

    /**
     * Set Employee indexes
     * @param index Array index
     * @param value Array value
     */
    public void setEmployeeIndexes(int index, long value) {
        this.employeeIndexes[index] = value;
    }
    
    /**
     * Get Product indexes
     * @return Employee indexes
     */
    public long[] getProductIndexes() {
        return this.productIndexes;
    }

    /**
     * Get Employee indexes
     * @param index Array index
     * @return Product identification
     */
    public long getProductIndexes(int index) {
        return this.productIndexes[index];
    }

    /**
     * Set Product indexes
     * @param productIndexes Product indexes
     */
    public void setProductIndexes(long[] productIndexes) {
        this.productIndexes = productIndexes;
    }

    /**
     * Set Product indexes
     * @param index Array index
     * @param value Array value
     */
    public void setProductIndexes(int index, long value) {
        this.productIndexes[index] = value;
    }
    
    /**
     * Select number of records in the user table
     * @return Number of records in the user table
     */
    private int selectCountEmployee() {
        int count = 0;
        String query = "SELECT count(*) FROM Employee";
        if (this.getDataFile().execute(query)) {
            try {
                this.getDataFile().getResultSet().next();
                count = this.getDataFile().getResultSet().getInt(1);
            } catch (SQLException ex) {
                Logger.getLogger(FraSell.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return count;
    }
    
    /**
     * Select number of records in the user table
     * @return Number of records in the user table
     */
    private int selectCountProduct() {
        int count = 0;
        String query = "SELECT count(*) FROM Product";
        if (this.getDataFile().execute(query)) {
            try {
                this.getDataFile().getResultSet().next();
                count = this.getDataFile().getResultSet().getInt(1);
            } catch (SQLException ex) {
                Logger.getLogger(FraSell.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return count;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butDelete;
    private javax.swing.JButton butFirst;
    private javax.swing.JButton butGenerate;
    private javax.swing.JButton butLast;
    private javax.swing.JButton butNew;
    private javax.swing.JButton butNext;
    private javax.swing.JButton butPrevious;
    private javax.swing.JButton butReport;
    private javax.swing.JButton butSearch;
    private javax.swing.JButton butUpdate;
    private javax.swing.JComboBox<String> comEmployee;
    private javax.swing.JComboBox<String> comProduct;
    private com.toedter.calendar.JDateChooser dateSale;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labDateSale;
    private javax.swing.JLabel labId;
    private javax.swing.JLabel labIdEmployee;
    private javax.swing.JLabel labQuantity;
    private javax.swing.JLabel lbaLastNameEmployee;
    private javax.swing.JLabel lbaNameEmployee;
    private javax.swing.JLabel lbaNameProduct;
    private javax.swing.JLabel lbaNameProduct1;
    private javax.swing.JPanel panButtons;
    private javax.swing.JPanel panPersonalData;
    private javax.swing.JTextField txtLastNameEmployee;
    private javax.swing.JTextField txtNameEmployee;
    private javax.swing.JTextField txtNameProduct;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtidSale;
    // End of variables declaration//GEN-END:variables

    /**
     * Validate the view for save
     *
     * @return True is ok
     */
    private boolean validateView() {
        boolean validate = !(txtidSale.equals("")
                || comEmployee.getSelectedItem().equals("")
                || txtNameEmployee.getText().equals("")
                || txtLastNameEmployee.getText().equals("")
                || comProduct.getSelectedItem().equals("")
                || txtNameProduct.getText().equals("")
                || (dateSale.getDate() == null)
                || txtNameProduct.getText().equals("")
                || txtidSale.getText().equals("")
                || txtQuantity.getText().equals(""));
        return validate;
    }

    /**
     * Obtain the view data and tranfer it to the object
     */
    private Sale view2Object() {
        Sale sale = new Sale();

        sale.setIdSale(Long.parseLong(txtidSale.getText()));
        sale.setIdEmployee(Long.parseLong(comEmployee.getSelectedItem().toString()));
        sale.setFirstname(txtNameEmployee.getText());
        sale.setLastname(txtLastNameEmployee.getText());
        sale.setIdProduct(Long.parseLong(comProduct.getSelectedItem().toString()));
        sale.setNameProduct(txtNameProduct.getText());
        sale.setSellDate(dateSale.getDate());
        sale.setQuantityProduct(Integer.parseInt(txtQuantity.getText()));

        return sale;
    }

    /**
     * You obtain data from an object and pass it to the view
     */
    private void updateView() {
        if (this.getDataFile().getResultSet() == null) {
            this.newView();
        } else {
            this.object2View();
        }
    }

    /**
     * You prepare the view to enter a new Sale data
     */
    private void newView() {
        txtidSale.setText("");
        comEmployee.setSelectedItem("");
        txtNameEmployee.setText("");
        txtLastNameEmployee.setText("");
        comProduct.setSelectedItem("");
        txtNameProduct.setText("");
        dateSale.setDate(new Date(108, 6, 15));
        txtQuantity.setText("");

        butNew.setText("Save");
        butFirst.setEnabled(false);
        butPrevious.setEnabled(false);
        butNext.setEnabled(false);
        butLast.setEnabled(false);
        butSearch.setEnabled(false);
        butUpdate.setEnabled(false);
        butDelete.setEnabled(false);
    }

    /**
     * Result set -> object
     */
    private void object2View() {
        Sale sale = new Sale();
        try {
            sale.setIdSale(this.getDataFile().getResultSet().getLong("idSale"));
            sale.setIdEmployee(this.getDataFile().getResultSet().getLong("idEmployee"));
            sale.setFirstname(this.getDataFile().getResultSet().getString("firstNameEmployee"));
            sale.setLastname(this.getDataFile().getResultSet().getString("lastNameEmployee"));
            sale.setIdProduct(this.getDataFile().getResultSet().getLong("idProduct"));
            sale.setNameProduct(this.getDataFile().getResultSet().getString("nameProduct"));
            sale.setSellDate(this.getDataFile().getResultSet().getDate("sellDate"));
            sale.setQuantityProduct(this.getDataFile().getResultSet().getInt("quantity"));

            this.object2View(sale);
        } catch (SQLException ex) {
            Logger.getLogger(FraSell.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Show the object data into view
     *
     * @param sale Sale to show
     */
    private void object2View(Sale sale) {
        
        txtidSale.setText("" + sale.getIdSale());
        comEmployee.setSelectedItem("" + sale.getIdEmployee());
        txtNameEmployee.setText("" + sale.getFirstname());
        txtLastNameEmployee.setText(sale.getLastname());
        comProduct.setSelectedItem(sale.getFirstname());
        txtNameProduct.setText(sale.getNameProduct());
        dateSale.setDate(sale.getSellDate());
        txtQuantity.setText("" + sale.getQuantityProduct());
    }

    /**
     * Select Sales from DB
     */
    private void selectSale() {
        String query = "SELECT * FROM ProductSale";
        if (this.getDataFile().execute(query)) {
            try {
                this.getDataFile().getResultSet().next();
                this.updateView();
            } catch (SQLException ex) {
                Logger.getLogger(FraSell.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * Insert new Sale
     */
    private void insertSale() {
        Sale sale = this.view2Object();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String query = "INSERT INTO ProductSale "
                + "(idSale, idEmployee, firstNameEmployee, lastNameEmployee, idProduct, nameProduct, sellDate, quantity)"
                + "VALUES ("
                + sale.getIdSale() + ", '"
                + sale.getFirstname()+ "', '"
                + sale.getLastname()+ "', "
                + sale.getIdProduct() + ", '"
                + sale.getNameProduct()+ "', #"
                + dateFormat.format(sale.getSellDate()) + "#,"
                + sale.getQuantityProduct()+ ")";
        if (this.getDataFile().execute(query)) {
            this.selectSale();
            this.searchSale(sale.getIdSale());
        }
    }

    /**
     * Update Sale
     */
    private void updateSale() {
        Sale sale = this.view2Object();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String query = "UPDATE ProductSale SET "
                + "idEmployee = '" + sale.getIdEmployee() + ",'"
                + "firstNameEmployee = '" + sale.getFirstname() + "', '"
                + "lastNameEmployee = '" + sale.getLastname() + "', "
                + "idProduct = '" + sale.getIdProduct()+ ", '"
                + "nameProduct = '" + sale.getFirstname() + "', #"
                + "sellDate = #" + dateFormat.format(sale.getSellDate()) + "#, "
                + "quantity = " + sale.getQuantityProduct()+ ")"
                + "WHERE idSale = " + sale.getIdSale();
        if (this.getDataFile().execute(query)) {
            this.selectSale();
            this.searchSale(sale.getIdSale());
        }
    }

    /**
     * Delete employee
     */
    private void deleteSale() {
        Sale sale = this.view2Object();
        String query = "DELETE * FROM ProductSale WHERE idSale = " + sale.getIdSale();
        if (this.getDataFile().execute(query)) {
            this.selectSale();
        }
    }

    /**
     * Search Sale by id
     *
     * @param id Sale id
     */
    private void searchSale(long id) {
        boolean find = false;
        try {
            if (this.getDataFile().getResultSet() != null) {
                Long lastId = this.getDataFile().getResultSet().getLong("id");
                this.getDataFile().getResultSet().beforeFirst();
                while (this.getDataFile().getResultSet().next()) {
                    if (this.getDataFile().getResultSet().getLong("id") == id) {
                        find = true;
                        break;
                    }
                }
                if (find) {
                    this.updateView();
                } else {
                    this.getDataFile().getResultSet().first();
                    this.searchSale(lastId);
                    JOptionPane.showMessageDialog(this, "Sale " + id + " was not found!");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(FraSell.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Load the employee combo
     */
    private void loadEmployeeCombo() {
        comEmployee.removeAllItems();
        this.setEmployeeIndexes(new long[this.selectCountEmployee()]);

        String query = "SELECT id, firstname, lastname FROM Employee ORDER BY id";
        if (this.getDataFile().execute(query)) {
            try {
                int index = 0;
                while (this.getDataFile().getResultSet().next()) {
                    this.setEmployeeIndexes(index++, this.getDataFile().getResultSet().getLong("id"));
                    comEmployee.addItem(
                            this.getDataFile().getResultSet().getString("id")
                            + " ");
                }
            } catch (SQLException ex) {
                Logger.getLogger(FraSell.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        
    }
    
    /**
     * Load the Produc combo
     */
    private void loadProductCombo() {
        comProduct.removeAllItems();
        this.setProductIndexes(new long[this.selectCountProduct()]);

        String query = "SELECT idProduct, productName, type FROM Product ORDER BY idProduct";
        if (this.getDataFile().execute(query)) {
            try {
                int index = 0;
                while (this.getDataFile().getResultSet().next()) {
                    this.setProductIndexes(index++, this.getDataFile().getResultSet().getLong("idProduct"));
                    comProduct.addItem(
                            this.getDataFile().getResultSet().getString("idProduct")
                            + " ");
                }
            } catch (SQLException ex) {
                Logger.getLogger(FraSell.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        
    }
}
